import "../../src/HtmlTest" exposing (Click, Input, ValidateAttribute, Action, testPlan, Plan, runPlan)
import "../derw-packages/derw-lang/html/src/Html" as Html exposing ( HtmlNode, RunningProgram, div, text, program, attribute, class_ )

type alias Model = {
    number: number,
    text: string
}

initialModel: Model
initialModel =
    { number: 0, text: "" }

type Msg =
    Noop
    | Clicked
    | ChangeText { value: string }
    | RunTests

plan: List Action
plan =
    [
        ValidateAttribute { selector: "button", attributeName: "innerHTML", attributeValue: "0" },
        Click { selector: "button" },
        ValidateAttribute { selector: "button", attributeName: "innerHTML", attributeValue: "1" },
        Click { selector: "button" },
        Click { selector: "button" },
        Click { selector: "button" },
        ValidateAttribute { selector: "button", attributeName: "innerHTML", attributeValue: "4" },
        Input { selector: "input", value: "noah" },
        ValidateAttribute { selector: "#output", attributeName: "innerHTML", attributeValue: "noah" },
     ]

update: Msg -> Model -> (Msg -> void) -> Model
update msg model send =
    case msg of
        Noop ->
            model

        Clicked ->
            { ...model, number: model.number + 1 }

        ChangeText { value } ->
            { ...model, text: value }

        RunTests ->
            let
                blank: void
                blank =
                    runPlan plan
            in
                model

viewTestRunner: HtmlNode Msg
viewTestRunner =
    Html.button [ Html.onClick (\_ -> RunTests) ] [ ] [ text "Run tests" ]

viewInput: string -> HtmlNode Msg
viewInput value =
    div [] [] [
        Html.input [ Html.onInput (\newValue -> ChangeText { value: newValue })] [ Html.attribute "value" value ],
        div [ ] [ Html.attribute "id" "output" ] [ text value ]
    ]

view: Model -> HtmlNode Msg
view model =
    div [ ] [ ] [
        Html.button [ Html.onClick (\_ -> Clicked) ] [ ] [ text `${model.number}` ],
        viewInput model.text,
        viewTestRunner
    ]

root: any
root =
    document.getElementById "root"

main: RunningProgram Model Msg
main =
    program {
        initialModel: initialModel,
        view: view,
        update: update,
        root: root
    }
